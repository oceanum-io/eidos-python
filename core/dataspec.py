# generated by datamodel-codegen:
#   filename:  core/dataspec.json
#   timestamp: 2024-05-12T22:42:44+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional, Union

from pydantic import ConfigDict, Field, RootModel, constr

from eidos._basemodel import EidosModel

from .. import features, oceanql


class EidosDataSpecification(RootModel[Any]):
    root: Any = Field(
        ..., description='EIDOS data specification', title='EIDOS data specification'
    )


class DataType(str, Enum):
    oceanumDatamesh = 'oceanumDatamesh'
    inlineDataset = 'inlineDataset'
    featureCollection = 'featureCollection'


class InlineDataset(EidosModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    name: Optional[str] = None
    attrs: Optional[Dict[str, Any]] = None
    coords: Dict[str, Any]
    data_vars: Dict[str, Any]
    dims: Dict[str, Any]
    coordkeys: Dict[str, Any]


class Transform(EidosModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    id: constr(pattern=r'^[A-Za-z0-9_]*$')
    name: Optional[str] = Field(
        None, description='Human readable name of this transform instance'
    )
    libraries: Optional[Dict[str, Any]] = Field(
        None, description='Libraries to add as key:<Library URL>'
    )
    inputs: Optional[List[constr(pattern=r'^[A-Za-z0-9_]*$')]] = Field(
        None, description='List of input data sources'
    )
    code: Optional[str] = Field(
        None, description='Transform code as body of function', title='Transform code'
    )


class Datasource(EidosModel):
    id: constr(pattern=r'^[A-Za-z0-9_]+$') = Field(
        ..., description='Unique ID of the datasource'
    )
    dataType: DataType
    dataSpec: Union[features.FeatureCollection, InlineDataset, oceanql.OceanQuery]
