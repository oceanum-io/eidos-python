# generated by datamodel-codegen:
#   filename:  core/root.json
#   timestamp: 2024-05-12T22:42:44+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Optional

from pydantic import ConfigDict, Field, constr

from eidos._basemodel import EidosModel

from . import dataspec, nodes


class Logo(EidosModel):
    light: Optional[str] = None
    dark: Optional[str] = None


class ColorScheme(str, Enum):
    light = 'light'
    dark = 'dark'


class Theme(EidosModel):
    colorScheme: Optional[ColorScheme] = Field(
        'light', description='Color scheme for the view'
    )


class EidosSpecification(EidosModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    id: constr(pattern=r'^[a-z0-9-_]+$') = Field(
        ..., description='Unique id of the specification'
    )
    name: str = Field(..., description='Human readable name of the specification')
    description: Optional[str] = Field(
        None, description='Description of the specification'
    )
    title: Optional[str] = Field(None, description='Title displayed at top of screen')
    logo: Optional[Logo] = None
    theme: Optional[Theme] = None
    data: List[dataspec.Datasource] = Field(..., title='Data')
    transforms: Optional[List[dataspec.Transform]] = Field([], title='Data Transforms')
    rootNode: nodes.Node
    modalNodes: Optional[List[nodes.ModalNode]] = None


EidosSpecification.model_rebuild()
