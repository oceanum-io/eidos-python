# generated by datamodel-codegen:
#   filename:  oceanql.json
#   timestamp: 2024-05-12T22:42:44+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional, Union

from pydantic import Field
from typing_extensions import Literal

from eidos._basemodel import EidosModel


class AggregateOps(str, Enum):
    mean = 'mean'
    min = 'min'
    max = 'max'
    std = 'std'
    sum = 'sum'


class BaseModel(EidosModel):
    pass


class CoordSelector(EidosModel):
    coord: str = Field(..., title='Coordinate name')
    values: List[Union[str, int, float]] = Field(
        ..., title='List of coordinate values to select by'
    )


class Function(EidosModel):
    id: str = Field(..., title='Function id')
    args: Dict[str, Any] = Field(..., title='function arguments')
    vselect: Optional[List[str]] = Field(None, title='Apply function to variables')
    replace: Optional[bool] = Field(False, title='Replace input dataset')


class GeoFilterType(str, Enum):
    feature = 'feature'
    radius = 'radius'
    bbox = 'bbox'


class LineString(EidosModel):
    bbox: Optional[List] = Field(None, title='Bbox')
    type: Literal['LineString'] = Field(..., title='Type')
    coordinates: List[List] = Field(..., min_length=2, title='Coordinates')


class MultiLineString(EidosModel):
    bbox: Optional[List] = Field(None, title='Bbox')
    type: Literal['MultiLineString'] = Field(..., title='Type')
    coordinates: List[List[List]] = Field(..., title='Coordinates')


class MultiPoint(EidosModel):
    bbox: Optional[List] = Field(None, title='Bbox')
    type: Literal['MultiPoint'] = Field(..., title='Type')
    coordinates: List[List] = Field(..., title='Coordinates')


class MultiPolygon(EidosModel):
    bbox: Optional[List] = Field(None, title='Bbox')
    type: Literal['MultiPolygon'] = Field(..., title='Type')
    coordinates: List[List[List[List]]] = Field(..., title='Coordinates')


class Point(EidosModel):
    bbox: Optional[List] = Field(None, title='Bbox')
    type: Literal['Point'] = Field(..., title='Type')
    coordinates: List = Field(..., title='Coordinates')


class Polygon(EidosModel):
    bbox: Optional[List] = Field(None, title='Bbox')
    type: Literal['Polygon'] = Field(..., title='Type')
    coordinates: List[List[List]] = Field(..., title='Coordinates')


class ResampleType(str, Enum):
    mean = 'mean'
    nearest = 'nearest'


class TimeFilterType(str, Enum):
    range = 'range'
    series = 'series'


class Aggregate(EidosModel):
    operations: Optional[List[AggregateOps]] = Field(
        ['mean'], title='Aggregate operations to perform'
    )
    spatial: Optional[bool] = Field(True, title='Aggregate over spatial filter')
    temporal: Optional[bool] = Field(True, title='Aggregate over temporal filter')


class Feature(EidosModel):
    bbox: Optional[List] = Field(None, title='Bbox')
    type: Literal['Feature'] = Field(..., title='Type')
    geometry: Optional[
        Union[Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon]
    ] = Field(..., title='Geometry')
    properties: Optional[Union[Dict[str, Any], BaseModel]] = Field(
        ..., title='Properties'
    )
    id: Optional[Union[int, str]] = Field(None, title='Id')


class GeoFilter(EidosModel):
    type: Optional[GeoFilterType] = Field('bbox', title='GeoFilter type')
    geom: Union[List[float], Feature] = Field(..., title='bbox OR geojson Feature')
    resolution: Optional[float] = Field(0.0, title='Maximum spatial resolution of data')
    alltouched: Optional[bool] = Field(None, title='Include all touched grid pixels')


class TimeFilter(EidosModel):
    type: Optional[TimeFilterType] = Field('range', title='Timefilter type')
    times: List[Optional[str]] = Field(..., title='Time range or series')
    resolution: Optional[str] = Field('native', title='Temporal resolution of data')
    resample: Optional[ResampleType] = Field('mean', title='Resampling operator')


class OceanQuery(EidosModel):
    datasource: str = Field(..., title='The id of the datasource')
    parameters: Optional[Dict[str, Any]] = Field({}, title='Datasource parameters')
    description: Optional[str] = Field(None, title='Optional description of this query')
    variables: Optional[List[str]] = Field(None, title='List of selected variables')
    timefilter: Optional[TimeFilter] = Field(None, title='Time filter')
    geofilter: Optional[GeoFilter] = Field(None, title='Spatial filter or interpolator')
    coordfilter: Optional[List[CoordSelector]] = Field(
        None, title='List of additional coordinate filters'
    )
    crs: Optional[Union[int, str]] = Field(
        None, title='Spatial reference for filter and output'
    )
    aggregate: Optional[Aggregate] = Field(None, title='Aggregate operations')
    functions: Optional[List[Function]] = Field([], title='Functions')
    limit: Optional[int] = Field(None, title='Limit size of response')
    id: Optional[str] = Field(None, title='Unique ID of this query')
