# generated by datamodel-codegen:
#   filename:  core/dataspec.json
#   timestamp: 2024-09-17T00:58:51+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Literal, Optional, Union

from oceanum.eidos._basemodel import EidosModel
from pydantic import ConfigDict, Field, RootModel, constr

from .. import features


class EidosDataSpecification(RootModel[Any]):
    root: Any = Field(..., title="EIDOS data specification")
    """
    EIDOS data specification
    """


class DataType(str, Enum):
    oceanumDatamesh = "oceanumDatamesh"
    inlineDataset = "inlineDataset"
    featureCollection = "featureCollection"


class AggregateOps(str, Enum):
    mean = "mean"
    min = "min"
    max = "max"
    std = "std"
    sum = "sum"


class BaseModel(EidosModel):
    """
    Generic base model
    """


class CoordSelector(EidosModel):
    coord: str = Field(..., title="Coordinate name")
    values: List[Union[str, int, float]] = Field(
        ..., title="List of coordinate values to select by"
    )


class Function(EidosModel):
    id: str = Field(..., title="Function id")
    args: Dict[str, Any] = Field(..., title="function arguments")
    vselect: Optional[List[str]] = Field(None, title="Apply function to variables")
    replace: Optional[bool] = Field(False, title="Replace input dataset")


class GeoFilterType(str, Enum):
    """
    Type of the geofilter. Can be one of:
    - 'feature': Select with a geojson feature
    - 'bbox': Select with a bounding box
    - 'radius': Select within radius of point
    """

    feature = "feature"
    radius = "radius"
    bbox = "bbox"


class LineString(EidosModel):
    """
    LineString Model
    """

    bbox: Optional[List] = Field(None, title="Bbox")
    type: Literal["LineString"] = Field(..., title="Type")
    coordinates: List[List] = Field(..., min_length=2, title="Coordinates")


class MultiLineString(EidosModel):
    """
    MultiLineString Model
    """

    bbox: Optional[List] = Field(None, title="Bbox")
    type: Literal["MultiLineString"] = Field(..., title="Type")
    coordinates: List[List[List]] = Field(..., title="Coordinates")


class MultiPoint(EidosModel):
    """
    MultiPoint Model
    """

    bbox: Optional[List] = Field(None, title="Bbox")
    type: Literal["MultiPoint"] = Field(..., title="Type")
    coordinates: List[List] = Field(..., title="Coordinates")


class MultiPolygon(EidosModel):
    """
    MultiPolygon Model
    """

    bbox: Optional[List] = Field(None, title="Bbox")
    type: Literal["MultiPolygon"] = Field(..., title="Type")
    coordinates: List[List[List[List]]] = Field(..., title="Coordinates")


class Point(EidosModel):
    """
    Point Model
    """

    bbox: Optional[List] = Field(None, title="Bbox")
    type: Literal["Point"] = Field(..., title="Type")
    coordinates: List = Field(..., title="Coordinates")


class Polygon(EidosModel):
    """
    Polygon Model
    """

    bbox: Optional[List] = Field(None, title="Bbox")
    type: Literal["Polygon"] = Field(..., title="Type")
    coordinates: List[List[List]] = Field(..., title="Coordinates")


class ResampleType(str, Enum):
    mean = "mean"
    nearest = "nearest"


class TimeFilterType(str, Enum):
    """
    Type of the timefilter. Can be one of:
    - 'range': Select within a time range
    """

    range = "range"
    series = "series"


class InlineDataset(EidosModel):
    """
    Inline dataset
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    name: Optional[str] = None
    attrs: Optional[Dict[str, Any]] = None
    coords: Dict[str, Any]
    data_vars: Dict[str, Any]
    dims: Dict[str, Any]
    coordkeys: Dict[str, Any]


class Transform(EidosModel):
    """
    Specification for data transform.
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    id: constr(pattern=r"^[A-Za-z0-9_]*$")
    name: Optional[str] = None
    """
    Human readable name of this transform instance
    """
    libraries: Optional[Dict[str, Any]] = None
    """
    Libraries to add as key:<Library URL>
    """
    inputs: Optional[List[constr(pattern=r"^[A-Za-z0-9_]*$")]] = None
    """
    List of input data sources
    """
    code: str = Field(..., title="Transform code")
    """
    Transform code as body of function
    """


class Aggregate(EidosModel):
    operations: Optional[List[AggregateOps]] = Field(
        ["mean"], title="Aggregate operations to perform"
    )
    spatial: Optional[bool] = Field(True, title="Aggregate over spatial filter")
    temporal: Optional[bool] = Field(True, title="Aggregate over temporal filter")


class Feature(EidosModel):
    """
    Feature Model
    """

    bbox: Optional[List] = Field(None, title="Bbox")
    type: Literal["Feature"] = Field(..., title="Type")
    geometry: Optional[
        Union[Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon]
    ] = Field(..., title="Geometry")
    properties: Optional[Union[Dict[str, Any], BaseModel]] = Field(
        ..., title="Properties"
    )
    id: Optional[Union[int, str]] = Field(None, title="Id")


class GeoFilter(EidosModel):
    type: Optional[GeoFilterType] = Field("bbox", title="GeoFilter type")
    geom: Union[List[float], Feature] = Field(..., title="bbox OR geojson Feature")
    resolution: Optional[float] = Field(0.0, title="Maximum spatial resolution of data")
    alltouched: Optional[bool] = Field(None, title="Include all touched grid pixels")


class TimeFilter(EidosModel):
    type: Optional[TimeFilterType] = Field("range", title="Timefilter type")
    times: List[Optional[str]] = Field(..., title="Time range or series")
    resolution: Optional[str] = Field("native", title="Temporal resolution of data")
    resample: Optional[ResampleType] = Field("mean", title="Resampling operator")


class FeatureCollection(EidosModel):
    """
    Feature collection
    """

    id: Optional[str] = None
    features: List[features.Feature]
    coordkeys: Optional[Dict[str, Any]] = None


class Oceanql(EidosModel):
    datasource: str = Field(..., title="The id of the datasource")
    parameters: Optional[Dict[str, Any]] = Field({}, title="Datasource parameters")
    description: Optional[str] = Field(None, title="Optional description of this query")
    variables: Optional[List[str]] = Field(None, title="List of selected variables")
    timefilter: Optional[TimeFilter] = Field(None, title="Time filter")
    geofilter: Optional[GeoFilter] = Field(None, title="Spatial filter or interpolator")
    coordfilter: Optional[List[CoordSelector]] = Field(
        None, title="List of additional coordinate filters"
    )
    crs: Optional[Union[int, str]] = Field(
        None, title="Spatial reference for filter and output"
    )
    aggregate: Optional[Aggregate] = Field(None, title="Aggregate operations")
    functions: Optional[List[Function]] = Field([], title="Functions")
    limit: Optional[int] = Field(None, title="Limit size of response")
    id: Optional[str] = Field(None, title="Unique ID of this query")


class Datasource(EidosModel):
    """
    Specification for EIDOS data source
    """

    id: constr(pattern=r"^[A-Za-z0-9_]+$")
    """
    Unique ID of the datasource
    """
    dataType: DataType
    dataSpec: Union[InlineDataset, FeatureCollection, Oceanql]
