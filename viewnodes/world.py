# generated by datamodel-codegen:
#   filename:  viewnodes/world.json
#   timestamp: 2024-05-12T22:42:44+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional, Union

from pydantic import ConfigDict, Field, RootModel

from eidos._basemodel import EidosModel

from .. import features
from ..core import state
from . import document, plot


class BaselayerType(str, Enum):
    oceanum = 'oceanum'
    terrain = 'terrain'


class ViewType(str, Enum):
    map = 'map'
    globe = 'globe'


class View(EidosModel):
    viewType: Optional[ViewType] = Field('map', description='Type of world view')
    longitude: float = Field(..., description='Longitude of view center')
    latitude: float = Field(..., description='Latitude of view center')
    pitch: Optional[float] = Field(0, description='Pitch angle of view')
    bearing: Optional[float] = Field(0, description='Bearing angle of view')
    maxZoom: Optional[float] = Field(20, description='Maximum zoom level')
    zoom: Optional[float] = Field(0, description='Zoom level')
    maxPitch: Optional[float] = Field(60, description='Maximum pitch angle')


class Geometry(
    RootModel[
        Union[
            features.Point, features.LineString, features.Polygon, features.MultiPoint
        ]
    ]
):
    root: Union[
        features.Point, features.LineString, features.Polygon, features.MultiPoint
    ]


class Colormap(EidosModel):
    colorscale: Optional[Union[List[str], str]] = None
    domain: Optional[List[Union[float, str]]] = None


class Visibility(str, Enum):
    always = 'always'
    click = 'click'
    hover = 'hover'


class Label(EidosModel):
    format: Optional[str] = Field(
        None,
        description='Label format string as templated markdown. {{value}} if the layer value',
    )
    visibility: Optional[Visibility] = Field(None, description='When to show labels')
    activeOnly: Optional[bool] = Field(
        None, description='Only show labels for active layer'
    )


class HoverInfo(EidosModel):
    template: str = Field(
        ...,
        description='Tooltip as Handlebars template. The picked object is passed as the render context.',
    )


class StyleAccessorConstant(RootModel[str]):
    root: str = Field(
        ..., description='Constant value', title='Style accessor constant'
    )


class StyleAccessorFunction(EidosModel):
    function: Optional[str] = Field(None, description='Accessor function identifier')


class Relative(str, Enum):
    panel = 'panel'
    location = 'location'


class Position(EidosModel):
    relative: Optional[Relative] = None
    top: Optional[float] = Field(None, description='top position offset in pixels')
    left: Optional[float] = Field(None, description='left position offset in pixels')
    bottom: Optional[float] = Field(
        None, description='bottom position offset in pixels'
    )
    right: Optional[float] = Field(None, description='right position offset in pixels')


class Type(str, Enum):
    points = 'points'
    polygon = 'polygon'
    bbox = 'bbox'
    pointRadius = 'pointRadius'
    dragDrop = 'dragDrop'


class CursorOffset(EidosModel):
    x: Optional[float] = 0
    y: Optional[float] = 0


class Icon(EidosModel):
    default: str = Field(..., description='Default icon URL')
    hover: Optional[str] = Field(None, description='Active hover icon URL')
    dark: Optional[str] = Field(None, description='Dark theme icon URL')
    cursorOffset: Optional[CursorOffset] = Field(None, description='Cursor offset')


class Control(EidosModel):
    type: Type = Field(..., description='Control type')
    id: str = Field(..., description='Control id')
    active: Optional[bool] = Field(None, description='Control active state')
    state: Optional[Dict[str, Any]] = Field(None, description='Control state')
    icon: Optional[Icon] = Field(None, description='Icon URLs')
    tooltip: Optional[str] = Field(None, description='Tooltip text')


class Controls(RootModel[List[Control]]):
    root: List[Control] = Field(
        ..., description='Control array', title='Controls definition'
    )


class Legend1(EidosModel):
    labels: Optional[Union[List[str], List[float]]] = None


class Legend(RootModel[Union[bool, Legend1]]):
    root: Union[bool, Legend1] = Field(
        ..., description='Legend properties', title='Legend definition'
    )


class StyleAccessor(RootModel[Union[StyleAccessorConstant, StyleAccessorFunction]]):
    root: Union[StyleAccessorConstant, StyleAccessorFunction] = Field(
        ..., description='Style properties', title='Style accessor definition'
    )


class Layer(EidosModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    id: str = Field(..., description='Unique id of layer')
    name: Optional[str] = Field(None, description='Human readable name of layer')
    layerType: str = Field(..., description='Name of worldlayer type')
    dataId: Optional[str] = Field(None, description='Name of data')
    label: Optional[Label] = None
    panel: Optional[Panel] = None
    visible: Optional[bool] = True
    exclusive: Optional[bool] = False
    layerSpec: Optional[Dict[str, Any]] = Field(
        None,
        description='Specification for world layer - depends on layer type',
        title='LayerSpec',
    )


class WorldView(EidosModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    layers: Optional[List[Layer]] = Field(
        None, description='Layers displayed on this map'
    )
    baselayerType: Optional[BaselayerType] = Field(None, description='Base layer type')
    viewState: Optional[View] = None
    currentTime: Optional[state.CurrentTime] = None
    currentContext: Optional[state.CurrentContext] = None
    timeControl: Optional[state.TimeControl] = None
    mapControls: Optional[Controls] = None


class Panel(EidosModel):
    format: Optional[str] = Field(
        None,
        description='Label format string as templated markdown. {{value}} if the layer value',
    )
    visibility: Optional[Visibility] = Field(None, description='When to show panel')
    position: Optional[Position] = Field(None, description='Position of panel')
    spec: Optional[Union[WorldView, plot.PlotView, document.DocumentView]] = Field(
        None, description='EIDOS panel specification'
    )


Layer.model_rebuild()
