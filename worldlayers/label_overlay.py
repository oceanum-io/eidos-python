# generated by datamodel-codegen:
#   filename:  worldlayers/label_overlay.json
#   timestamp: 2024-05-12T22:42:44+00:00

from __future__ import annotations

from typing import Optional, Union

from pydantic import ConfigDict, Field

from eidos._basemodel import EidosModel

from ..core import state
from ..viewnodes import world


class Style(EidosModel):
    lineColor: Optional[str] = Field(
        'rgba(255, 255, 255, 255)', description='Color of the lines'
    )
    backgroundColor: Optional[Union[str, world.Colormap]] = Field(
        None, description='Background color of the label'
    )
    fontColor: Optional[Union[str, world.Colormap]] = Field(
        None, description='Font color of the label'
    )
    lineWidth: Optional[int] = Field(1, description='Width of the lines')
    padding: Optional[int] = Field(2, description='Padding around the label')
    fontSize: Optional[int] = Field(14, description='Font size of the label')
    fontFamily: Optional[str] = Field(
        'Monaco, monospace', description='Font family of the label'
    )
    fontWeight: Optional[str] = Field('normal', description='Font weight of the label')
    iconURL: Optional[str] = Field('', description='URL of icon to prepend to label')


class LabelLayer(EidosModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    hoverInfo: Optional[world.HoverInfo] = None
    timeSelect: Optional[state.TimeSelect] = None
    geometry: Optional[world.Geometry] = None
    labelTemplate: str = Field(
        ...,
        description='Label format string as Handlebars template. See https://handlebarsjs.com/guide/#simple-expressions',
    )
    colormap: Optional[world.Colormap] = None
    style: Optional[Style] = None
    numberOfLabels: Optional[int] = Field(20, description='Number of labels to show')
    lineLength: Optional[int] = Field(1, description='Length of the anchor line')
    labelAngle: Optional[int] = Field(40, description='Angle of the label anchor')
